from PyQt4 import QtCore, QtGui
import sys, os, Pyro, subprocess
from Pyro import *
import icons_resource

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 332)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Fixed, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(600, 332))
        MainWindow.setMaximumSize(QtCore.QSize(600, 332))
        QtGui.QApplication.setStyle(QtGui.QStyleFactory.create('oxygen'))
        self.centralWidget = QtGui.QWidget(MainWindow)
        self.centralWidget.setObjectName("centralWidget")
        self.gridLayout_2 = QtGui.QGridLayout(self.centralWidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.statusBrowser = QtGui.QTextBrowser(self.centralWidget)
        self.statusBrowser.setMinimumSize(QtCore.QSize(209, 0))
        self.statusBrowser.setMaximumSize(QtCore.QSize(340, 16777215))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        self.statusBrowser.setFont(font)
        self.statusBrowser.setObjectName("statusBrowser")
        self.gridLayout_2.addWidget(self.statusBrowser, 2, 1, 1, 1)
        self.selectTargetButton = QtGui.QPushButton(self.centralWidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectTargetButton.sizePolicy().hasHeightForWidth())
        self.selectTargetButton.setSizePolicy(sizePolicy)
        self.selectTargetButton.setMinimumSize(QtCore.QSize(115, 0))
        self.selectTargetButton.setMaximumSize(QtCore.QSize(340, 16777215))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setWeight(75)
        font.setBold(True)
        self.selectTargetButton.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/folder-open.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.selectTargetButton.setIcon(icon)
        self.selectTargetButton.setObjectName("selectTargetButton")
        self.gridLayout_2.addWidget(self.selectTargetButton, 1, 1, 1, 1)
        self.selectSourceButton = QtGui.QPushButton(self.centralWidget)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.selectSourceButton.sizePolicy().hasHeightForWidth())
        self.selectSourceButton.setSizePolicy(sizePolicy)
        self.selectSourceButton.setMinimumSize(QtCore.QSize(120, 0))
        self.selectSourceButton.setMaximumSize(QtCore.QSize(340, 16777215))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setWeight(75)
        font.setBold(True)
        self.selectSourceButton.setFont(font)
        self.selectSourceButton.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.selectSourceButton.setText("Source Image:")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/drive-harddisk.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.selectSourceButton.setIcon(icon1)
        self.selectSourceButton.setObjectName("selectSourceButton")
        self.gridLayout_2.addWidget(self.selectSourceButton, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralWidget)
        self.clientListDock = QtGui.QDockWidget(MainWindow)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clientListDock.sizePolicy().hasHeightForWidth())
        self.clientListDock.setSizePolicy(sizePolicy)
        self.clientListDock.setMinimumSize(QtCore.QSize(260, 79))
        self.clientListDock.setMaximumSize(QtCore.QSize(260, 277))
        self.clientListDock.setBaseSize(QtCore.QSize(260, 300))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setWeight(75)
        font.setBold(True)
        self.clientListDock.setFont(font)
        self.clientListDock.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.clientListDock.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.clientListDock.setFeatures(QtGui.QDockWidget.DockWidgetFloatable|QtGui.QDockWidget.DockWidgetMovable|QtGui.QDockWidget.DockWidgetVerticalTitleBar)
        self.clientListDock.setAllowedAreas(QtCore.Qt.AllDockWidgetAreas)
        self.clientListDock.setObjectName("clientListDock")
        self.dockWidgetContents = QtGui.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.clientList = QtGui.QTableWidget(self.dockWidgetContents)
        self.clientList.setGeometry(QtCore.QRect(0, 10, 250, 300))
        self.clientList.setMinimumSize(QtCore.QSize(10, 0))
        self.clientList.setMaximumSize(QtCore.QSize(250, 300))
        self.clientList.setBaseSize(QtCore.QSize(250, 300))
        font = QtGui.QFont()
        font.setFamily("Consolas")
        self.clientList.setFont(font)
        self.clientList.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.clientList.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.clientList.setFrameShape(QtGui.QFrame.StyledPanel)
        self.clientList.setLineWidth(1)
        self.clientList.setMidLineWidth(1)
        self.clientList.setAlternatingRowColors(True)
        self.clientList.setSortingEnabled(True)
        self.clientList.setObjectName("clientList")
        self.clientListDock.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(2), self.clientListDock)
        self.statusBar = QtGui.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        font.setWeight(75)
        font.setBold(True)
        self.statusBar.setFont(font)
        self.statusBar.setSizeGripEnabled(False)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)
        self.menuBar = QtGui.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 594, 23))
        self.menuBar.setObjectName("menuBar")
        self.menu_File = QtGui.QMenu(self.menuBar)
        self.menu_File.setObjectName("menu_File")
        MainWindow.setMenuBar(self.menuBar)
        self.action_Exit = QtGui.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/window-close.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action_Exit.setIcon(icon2)
        self.action_Exit.setIconVisibleInMenu(True)
        self.action_Exit.setObjectName("action_Exit")
        self.action_Exit.setMenuRole(QtGui.QAction.QuitRole)
        self.action_Exit.triggered.connect(QtGui.qApp.quit)
        self.menu_File.addAction(self.action_Exit)
        self.menuBar.addAction(self.menu_File.menuAction())
        self.selectSourceButton.clicked.connect(self.selectSourceImage)
        self.selectTargetButton.clicked.connect(self.selectTargetPath)
        self.clientList.insertColumn(0)
        self.clientList.setColumnWidth(0, 120)
        self.clientList.insertColumn(1)
        self.clientList.setHorizontalHeaderLabels(["Address", "Name"])
        self.clientList.horizontalHeader().setStretchLastSection(True)
        self.clientList.customContextMenuRequested.connect(self.openContextMenu)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.selectSourceButton, self.selectTargetButton)
        MainWindow.setTabOrder(self.selectTargetButton, self.statusBrowser)
        MainWindow.setTabOrder(self.statusBrowser, self.clientList)
        MainWindow.setTabOrder(self.clientList, self.clientListDock)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QtGui.QApplication.translate("MainWindow", "MainWindow", None, QtGui.QApplication.UnicodeUTF8))
        self.selectTargetButton.setToolTip(QtGui.QApplication.translate("MainWindow", "Select target path.", None, QtGui.QApplication.UnicodeUTF8))
        self.selectTargetButton.setText(QtGui.QApplication.translate("MainWindow", "Target Path:", None, QtGui.QApplication.UnicodeUTF8))
        self.selectSourceButton.setToolTip(QtGui.QApplication.translate("MainWindow", "Select source image.", None, QtGui.QApplication.UnicodeUTF8))
        self.clientListDock.setWindowTitle(QtGui.QApplication.translate("MainWindow", "Available Clients", None, QtGui.QApplication.UnicodeUTF8))
        self.menu_File.setTitle(QtGui.QApplication.translate("MainWindow", "&File", None, QtGui.QApplication.UnicodeUTF8))
        self.action_Exit.setText(QtGui.QApplication.translate("MainWindow", "&Exit", None, QtGui.QApplication.UnicodeUTF8))
        self.action_Exit.setShortcut(QtGui.QApplication.translate("MainWindow", "Ctrl+Q", None, QtGui.QApplication.UnicodeUTF8))

    def selectSourceImage(self):
        self.sourceImage = QtGui.QFileDialog.getOpenFileName(None, "Select Source Image")
        if self.sourceImage:
            self.selectSourceButton.setText(self.sourceImage)

    def selectTargetPath(self):
        self.targetImage = QtGui.QFileDialog.getOpenFileName(None, "Select Target Path")
        if self.targetImage:
            self.selectTargetButton.setText(self.targetImage)

    def openContextMenu(self, position):
        menu = QtGui.QMenu()
        update = menu.addAction("Update")
        run = menu.addAction("Run")
        action = menu.exec_(self.clientList.mapToGlobal(QtCore.QPoint(position.x(), position.y()+25)))
        if action == update:
            self.updateClientList()
        elif action == run:
            self.runStreamingn()


    def updateClientList(self):
        self.clientList.clearContents()
        ns = Pyro.locateNS()
        pyroclients = ns.list()
        clients = [(Pyro.core.URI(client).host, k) for client in pyroclients.values() for k,v in pyroclients.iteritems() if v == client and k != "Pyro.NameServer"]
        idx = 0
        for client in clients:
            self.clientList.insertRow(idx)
            self.clientList.setItem(idx, 0, QtGui.QTableWidgetItem(client[0], 0))
            self.clientList.setItem(idx, 1, QtGui.QTableWidgetItem(str(client[1]), 0))
            idx += 1

    def runStreamingn(self):
        data = self.clientList.selectedItems()
        clients = ""
        for item in data:
            clients += item.text() + " "
        p = subprocess.Popen(["python image_server.py %s %s" % (self.sourceImage, clients)], shell=True, stdout=subprocess.PIPE)
        output = p.communicate()[0]
        self.statusBrowser.append(output)

if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    ui = Ui_MainWindow()
    window = QtGui.QMainWindow()
    ui.setupUi(window)
    window.show()
    sys.exit(app.exec_())
